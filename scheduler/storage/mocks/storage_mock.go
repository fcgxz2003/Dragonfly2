// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go
//
// Generated by this command:
//
//	mockgen -destination mocks/storage_mock.go -source storage.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	storage "d7y.io/dragonfly/v2/scheduler/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// ClearCost mocks base method.
func (m *MockStorage) ClearCost() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearCost")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearCost indicates an expected call of ClearCost.
func (mr *MockStorageMockRecorder) ClearCost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearCost", reflect.TypeOf((*MockStorage)(nil).ClearCost))
}

// ClearDownload mocks base method.
func (m *MockStorage) ClearDownload() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearDownload")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearDownload indicates an expected call of ClearDownload.
func (mr *MockStorageMockRecorder) ClearDownload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearDownload", reflect.TypeOf((*MockStorage)(nil).ClearDownload))
}

// ClearDownloadContent mocks base method.
func (m *MockStorage) ClearDownloadContent() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearDownloadContent")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearDownloadContent indicates an expected call of ClearDownloadContent.
func (mr *MockStorageMockRecorder) ClearDownloadContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearDownloadContent", reflect.TypeOf((*MockStorage)(nil).ClearDownloadContent))
}

// ClearGraphsage mocks base method.
func (m *MockStorage) ClearGraphsage() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearGraphsage")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearGraphsage indicates an expected call of ClearGraphsage.
func (mr *MockStorageMockRecorder) ClearGraphsage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearGraphsage", reflect.TypeOf((*MockStorage)(nil).ClearGraphsage))
}

// ClearGraphsageContent mocks base method.
func (m *MockStorage) ClearGraphsageContent() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearGraphsageContent")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearGraphsageContent indicates an expected call of ClearGraphsageContent.
func (mr *MockStorageMockRecorder) ClearGraphsageContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearGraphsageContent", reflect.TypeOf((*MockStorage)(nil).ClearGraphsageContent))
}

// ClearNetworkTopology mocks base method.
func (m *MockStorage) ClearNetworkTopology() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearNetworkTopology")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearNetworkTopology indicates an expected call of ClearNetworkTopology.
func (mr *MockStorageMockRecorder) ClearNetworkTopology() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearNetworkTopology", reflect.TypeOf((*MockStorage)(nil).ClearNetworkTopology))
}

// CostCount mocks base method.
func (m *MockStorage) CostCount() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CostCount")
	ret0, _ := ret[0].(int64)
	return ret0
}

// CostCount indicates an expected call of CostCount.
func (mr *MockStorageMockRecorder) CostCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CostCount", reflect.TypeOf((*MockStorage)(nil).CostCount))
}

// CreateCost mocks base method.
func (m *MockStorage) CreateCost(arg0 storage.Cost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCost", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCost indicates an expected call of CreateCost.
func (mr *MockStorageMockRecorder) CreateCost(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCost", reflect.TypeOf((*MockStorage)(nil).CreateCost), arg0)
}

// CreateDownload mocks base method.
func (m *MockStorage) CreateDownload(arg0 storage.Download) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDownload", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDownload indicates an expected call of CreateDownload.
func (mr *MockStorageMockRecorder) CreateDownload(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDownload", reflect.TypeOf((*MockStorage)(nil).CreateDownload), arg0)
}

// CreateGraphsage mocks base method.
func (m *MockStorage) CreateGraphsage(arg0 storage.Graphsage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGraphsage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGraphsage indicates an expected call of CreateGraphsage.
func (mr *MockStorageMockRecorder) CreateGraphsage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraphsage", reflect.TypeOf((*MockStorage)(nil).CreateGraphsage), arg0)
}

// CreateNetworkTopology mocks base method.
func (m *MockStorage) CreateNetworkTopology(arg0 storage.NetworkTopology) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkTopology", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetworkTopology indicates an expected call of CreateNetworkTopology.
func (mr *MockStorageMockRecorder) CreateNetworkTopology(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkTopology", reflect.TypeOf((*MockStorage)(nil).CreateNetworkTopology), arg0)
}

// DownloadCount mocks base method.
func (m *MockStorage) DownloadCount() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadCount")
	ret0, _ := ret[0].(int64)
	return ret0
}

// DownloadCount indicates an expected call of DownloadCount.
func (mr *MockStorageMockRecorder) DownloadCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadCount", reflect.TypeOf((*MockStorage)(nil).DownloadCount))
}

// GraphsageCount mocks base method.
func (m *MockStorage) GraphsageCount() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GraphsageCount")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GraphsageCount indicates an expected call of GraphsageCount.
func (mr *MockStorageMockRecorder) GraphsageCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GraphsageCount", reflect.TypeOf((*MockStorage)(nil).GraphsageCount))
}

// ListCost mocks base method.
func (m *MockStorage) ListCost() ([]storage.Cost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCost")
	ret0, _ := ret[0].([]storage.Cost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCost indicates an expected call of ListCost.
func (mr *MockStorageMockRecorder) ListCost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCost", reflect.TypeOf((*MockStorage)(nil).ListCost))
}

// ListDownload mocks base method.
func (m *MockStorage) ListDownload() ([]storage.Download, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDownload")
	ret0, _ := ret[0].([]storage.Download)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDownload indicates an expected call of ListDownload.
func (mr *MockStorageMockRecorder) ListDownload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDownload", reflect.TypeOf((*MockStorage)(nil).ListDownload))
}

// ListGraphsage mocks base method.
func (m *MockStorage) ListGraphsage() ([]storage.Graphsage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGraphsage")
	ret0, _ := ret[0].([]storage.Graphsage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGraphsage indicates an expected call of ListGraphsage.
func (mr *MockStorageMockRecorder) ListGraphsage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGraphsage", reflect.TypeOf((*MockStorage)(nil).ListGraphsage))
}

// ListNetworkTopology mocks base method.
func (m *MockStorage) ListNetworkTopology() ([]storage.NetworkTopology, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNetworkTopology")
	ret0, _ := ret[0].([]storage.NetworkTopology)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNetworkTopology indicates an expected call of ListNetworkTopology.
func (mr *MockStorageMockRecorder) ListNetworkTopology() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworkTopology", reflect.TypeOf((*MockStorage)(nil).ListNetworkTopology))
}

// NetworkTopologyCount mocks base method.
func (m *MockStorage) NetworkTopologyCount() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkTopologyCount")
	ret0, _ := ret[0].(int64)
	return ret0
}

// NetworkTopologyCount indicates an expected call of NetworkTopologyCount.
func (mr *MockStorageMockRecorder) NetworkTopologyCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkTopologyCount", reflect.TypeOf((*MockStorage)(nil).NetworkTopologyCount))
}

// OpenCost mocks base method.
func (m *MockStorage) OpenCost() (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenCost")
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenCost indicates an expected call of OpenCost.
func (mr *MockStorageMockRecorder) OpenCost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenCost", reflect.TypeOf((*MockStorage)(nil).OpenCost))
}

// OpenDownload mocks base method.
func (m *MockStorage) OpenDownload() (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenDownload")
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenDownload indicates an expected call of OpenDownload.
func (mr *MockStorageMockRecorder) OpenDownload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenDownload", reflect.TypeOf((*MockStorage)(nil).OpenDownload))
}

// OpenGraphsage mocks base method.
func (m *MockStorage) OpenGraphsage() (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenGraphsage")
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenGraphsage indicates an expected call of OpenGraphsage.
func (mr *MockStorageMockRecorder) OpenGraphsage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenGraphsage", reflect.TypeOf((*MockStorage)(nil).OpenGraphsage))
}

// OpenNetworkTopology mocks base method.
func (m *MockStorage) OpenNetworkTopology() (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenNetworkTopology")
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenNetworkTopology indicates an expected call of OpenNetworkTopology.
func (mr *MockStorageMockRecorder) OpenNetworkTopology() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenNetworkTopology", reflect.TypeOf((*MockStorage)(nil).OpenNetworkTopology))
}
